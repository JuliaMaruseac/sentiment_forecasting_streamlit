import streamlit as st
import pandas as pd
from datetime import datetime
from app import data_loader, preprocessing, sentiment_analyzer, trend_forecaster, visualizer

st.set_page_config(page_title="TrendScan", layout="wide")

analyzer = sentiment_analyzer.MultiLangSentimentAnalyzer()
forecaster = trend_forecaster.TrendForecaster()

st.title("üìä TrendScan ‚Äî –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É.")

tab1, tab2 = st.tabs(["üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–µ", "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ CSV"])

with tab1:
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        df = data_loader.load_tweets(query, max_tweets=300)
        df.columns = df.columns.str.lower()
        # –°–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç
        df["clean"] = df["text"].apply(preprocessing.clean_text)

        # –¢–µ–ø–µ—Ä—å –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º "–ø–∞–∫–µ—Ç–æ–º"
        df["clean"] = preprocessing.lemmatize_texts(df["clean"].tolist())

        sentiments = analyzer.batch_predict(df["clean"])
        sent_df = pd.DataFrame(sentiments)
        df_final = pd.concat([df, sent_df], axis=1)

        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π")
        st.plotly_chart(visualizer.plot_sentiment_distribution(df_final), use_container_width=True)

        st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        ts_data = forecaster.prepare_data(df)
        forecast = forecaster.fit_and_predict(ts_data)
        st.plotly_chart(visualizer.plot_forecast(forecast), use_container_width=True)

        st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV", df_final.to_csv(index=False), file_name="results.csv")

with tab2:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–æ–π 'text'", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        df.columns = df.columns.str.lower()

        if "text" in df.columns:
            with st.spinner("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞..."):
                # –°–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç
            df["clean"] = df["text"].apply(preprocessing.clean_text)

                # –¢–µ–ø–µ—Ä—å –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º "–ø–∞–∫–µ—Ç–æ–º"
            df["clean"] = preprocessing.lemmatize_texts(df["clean"].tolist())
            sentiments = analyzer.batch_predict(df["clean"])
            sent_df = pd.DataFrame(sentiments)
            df_final = pd.concat([df, sent_df], axis=1)

            st.subheader("üìä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            st.plotly_chart(visualizer.plot_sentiment_distribution(df_final), use_container_width=True)
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV", df_final.to_csv(index=False), file_name="results.csv")
        else:
            st.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'text' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª.")
